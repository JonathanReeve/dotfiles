;; -*- mode: emacs-lisp; lexical-binding: t -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs

   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused

   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t

   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(elm
     ;auto-completion
     csv
     yaml
     shell-scripts
     javascript
     html
     helm
     nixos
     (haskell :variables haskell-font-lock-symbols t)
     (keyboard-layout :variables kl-layout 'colemak-hnei)
     emacs-lisp
     google-calendar
     bibtex
     ;ipython-notebook
     (mu4e :variables mu4e-account-alist t)
     ;(elfeed :variables rmh-elfeed-org-files (list "~/Dropbox/Org/RSS.org"))
     git
     markdown
     python
     org
     ranger
     (shell :variables
             shell-default-height 30
             shell-default-position 'bottom)
     spell-checking
     syntax-checking
     )

   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages '(
                                      ;(ereader :location (recipe :fetcher github :repo "bddean/emacs-ereader"))
                                      ;; (nord-theme)
                                      (base16-theme)
                                      (password-store)
                                      (direnv)
                                      )
   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()

   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '(adaptive-wrap smartparens exec-path-from-shell)
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and deletes any unused
   ;; packages as well as their unused dependencies. `used-but-keep-unused'
   ;; installs only the used packages but won't delete unused ones. `all'
   ;; installs *all* packages supported by Spacemacs and never uninstalls them.
   ;; (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non-nil then enable support for the portable dumper. You'll need
   ;; to compile Emacs 27 from source following the instructions in file
   ;; EXPERIMENTAL.org at to root of the git repository.
   ;; (default nil)
   dotspacemacs-enable-emacs-pdumper nil

   ;; File path pointing to emacs 27.1 executable compiled with support
   ;; for the portable dumper (this is currently the branch pdumper).
   ;; (default "emacs-27.0.50")
   dotspacemacs-emacs-pdumper-executable-file "emacs-27.0.50"

   ;; Name of the Spacemacs dump file. This is the file will be created by the
   ;; portable dumper in the cache directory under dumps sub-directory.
   ;; To load it when starting Emacs add the parameter `--dump-file'
   ;; when invoking Emacs 27.1 executable on the command line, for instance:
   ;;   ./emacs --dump-file=~/.emacs.d/.cache/dumps/spacemacs.pdmp
   ;; (default spacemacs.pdmp)
   dotspacemacs-emacs-dumper-dump-file "spacemacs.pdmp"

   ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t

   ;; Maximum allowed time in seconds to contact an ELPA repository.
   ;; (default 5)
   dotspacemacs-elpa-timeout 5

   ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
   ;; This is an advanced option and should not be changed unless you suspect
   ;; performance issues due to garbage collection operations.
   ;; (default '(100000000 0.1))
   dotspacemacs-gc-cons '(100000000 0.1)

   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the
   ;; latest version of packages from MELPA. (default nil)
   dotspacemacs-use-spacelpa nil

   ;; If non-nil then verify the signature for downloaded Spacelpa archives.
   ;; (default nil)
   dotspacemacs-verify-spacelpa-archives nil

   ;; If non-nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil

   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'. (default 'emacs-version)
   dotspacemacs-elpa-subdirectory 'emacs-version

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim

   ;; If non-nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))

   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive t

   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode

   ;; Initial message in the scratch buffer, such as "Welcome to Spacemacs!"
   ;; (default nil)
   dotspacemacs-initial-scratch-message nil

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press `SPC T n' to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(base16-apathy
                         base16-default-dark
                         base16-eighties
                         base16-atelier-cave
                         base16-atelier-lakeside
                         base16-atelier-plateau
                         base16-atelier-savanna
                         base16-darktooth
                         base16-default-dark
                         base16-dracula
                         base16-flat
                         base16-gruvbox-dark-pale
                         base16-harmonic-dark
                         base16-materia
                         base16-monokai
                         base16-nord
                         base16-oceanicnext
                         base16-ocean
                         base16-onedark
                         base16-railscasts
                         base16-solarflare
                         base16-tomorrow-night
                         base16-woodland
                         ;; brin
                         ;; bubbleberry
                         ;; jazz
                         ;; jbeans
                         ;; junio
                         ;; mustang
                         ;; noctilux
                         ;; planet
                         ;; purple-haze
                         ;; sanityinc-tomorrow-night
                         ;; spacegray
                         ;; subatomic
                         ;; gruvbox
                         spacemacs-dark
                         )
   ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
   ;; `all-the-icons', `custom', `vim-powerline' and `vanilla'. The first three
   ;; are spaceline themes. `vanilla' is default Emacs mode-line. `custom' is a
   ;; user defined themes, refer to the DOCUMENTATION.org for more info on how
   ;; to create your own spaceline theme. Value can be a symbol or list with\
   ;; additional properties.
   ;; (default '(spacemacs :separator wave :separator-scale 1.5))
   dotspacemacs-mode-line-theme '(spacemacs :separator arrow-fade :separator-scale 1.5)

   ;; If non-nil the cursor color matches the state color in GUI Emacs.
   ;; (default t)
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("Hack"
                               :size 30
                               :weight normal
                               :width normal
                               :powerline-scale 1.2)
   ;; The leader key
   dotspacemacs-leader-key "SPC"

   ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"

   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","

   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil

   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non-nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non-nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil
   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 5
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'original
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non-nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non-nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always
   ;; If non-nil the paste micro-state is enabled. When enabled pressing `p'
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-transient-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose nil
   ;; If non-nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t
   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non-nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non-nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t
   ;; If non-nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t
   ;; If non-nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling nil
   ;; Control line numbers activation.
   ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
   ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; (default nil)
   dotspacemacs-line-numbers nil

   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil

   ;; If non-nil `smartparens-strict-mode' will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil

   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil

   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all

   ;; If non-nil, start an Emacs server if one is not already running.
   ;; (default nil)
   dotspacemacs-enable-server t

   ;; Set the emacs server socket location.
   ;; If nil, uses whatever the Emacs default is, otherwise a directory path
   ;; like \"~/.emacs.d/server\". It has no effect if
   ;; `dotspacemacs-enable-server' is nil.
   ;; (default nil)
   dotspacemacs-server-socket-dir nil

   ;; If non-nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server t
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
   ;; (default '("rg" "ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")

   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format "%t@%a"

   ;; Format specification for setting the icon title format
   ;; (default nil - same as frame-title-format)
   dotspacemacs-icon-title-format nil

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil

   ;; Either nil or a number of seconds. If non-nil zone out after the specified
   ;; number of seconds. (default nil)
   dotspacemacs-zone-out-when-idle nil

   ;; Run `spacemacs/prettify-org-buffer' when
   ;; visiting README.org files of Spacemacs.
   ;; (default nil)
   dotspacemacs-pretty-docs nil))

(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init', before layer configuration
executes.
 This function is mostly useful for variables that need to be set
before packages are loaded. If you are unsure, you should try in setting them in
`dotspacemacs/user-config' first."
  )

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."

  ;; General
  (setq vc-follow-symlinks t) ;; Always follow symlinks. 

  ;; Use Tectonic as LaTeX compiler
  ;;(setq org-latex-compiler "tectonic")
  (setq org-latex-pdf-process (list "tectonic %f"))

  ;; New function for displaying ANSI color codes
  (require 'ansi-color)
  (defun display-ansi-colors ()
    (interactive)
    (ansi-color-apply-on-region (point-min) (point-max)))

  ;; Don't prompt when opening journal or other large files
  ;(setq large-file-warning-threshold 20000000) 

  ;; HiDPI. Make both fringes 18 pixels wide
  (fringe-mode 18)
  (define-fringe-bitmap 'right-arrow
    (vector #b000000000000000000
            #b000000000000000000
            #b000000000001110000
            #b000000000000111000
            #b000000000000011100
            #b000000000000001110
            #b111111111111111111
            #b111111111111111111
            #b111111111111111111
            #b000000000000001110
            #b000000000000011100
            #b000000000000111000
            #b000000000001110000
            #b000000000000000000
            #b000000000000000000
            #b000000000000000000
            #b000000000000000000))

  ;; Org Mode
  (setq org-startup-indented t)
  (setq org-todo-keywords
        '((sequence "TODO" "WAITING" "|" "DONE" "CANCELED")))
  (setq evil-org-key-theme '(textobjects navigation additional insert todo))
  (setq org-default-priority ?C)
  (setq org-lowest-priority ?G)
  ;; Show clock tables in hours, not days. 
  (setq org-duration-format 'h:mm)

  ;; Fancy custom syntax highlighting of quoted strings!
  ;; (add-hook 'org-mode-hook
  ;;           (lambda ()
  ;;             (font-lock-add-keywords nil '(("\".*?\"" 1 font-lock-constant-face t)
  ;;                                           ("'.*?'" 1 font-lock-doc-face t)))))

  (defun org-journal-new-entry ()
    "Inserts header with inactive timestamp, hours and minutes. 
A custom journal helper function."
    (interactive)
    (org-insert-heading)
    (org-insert-time-stamp (current-time) t t))

  ;; Enable visual-line-mode by default in Org Mode. 
  (add-hook 'org-mode-hook 'visual-line-mode)
  ;; Make evil-mode up/down operate in screen lines instead of logical lines
  (define-key evil-normal-state-map "n" 'evil-next-visual-line)
  (define-key evil-normal-state-map "e" 'evil-previous-visual-line)
  ;; Also in visual mode
  (define-key evil-visual-state-map "n" 'evil-next-visual-line)
  (define-key evil-visual-state-map "e" 'evil-previous-visual-line)

  ;; Org Code Execution
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (haskell . t)
     (emacs-lisp . t)))

  ;; Org Calendar and Diary
  (setq diary-file "~/Dropbox/Org/diary")
  (setq org-agenda-include-diary t)
  ;;(setq org-agenda-window-setup 'only-window)
  (add-hook 'org-agenda-mode-hook
            (lambda ()
              (calendar-set-date-style 'iso)))
  (add-hook 'diary-mode-hook 'diary-fancy-display-mode)

  ;; Google Calendar
  (setq org-gcal-up-days 0)
  (setq org-gcal-file-alist '(("jon.reeve@gmail.com" . "/home/jon/Dropbox/Org/Projects/schedule.org"))
        cfw:org-capture-template '("s" "Scedule an event" entry
                                   (file "/home/jon/Dropbox/Org/Projects/schedule.org")
                                   "* %^{Description}\n%^{LOCATION}p\n%(cfw:org-capture-day)\n%?"))

  ;; Load from .authinfo. Adapted from https://github.com/myuhe/org-gcal.el/issues/47
  ;; (require 'netrc)
  ;; (defun get-authinfo (host port)
  ;;   (let* ((netrc (netrc-parse (expand-file-name "~/.authinfo")))
  ;;          (hostentry (netrc-machine netrc host port port)))
  ;;     (when hostentry (netrc-get hostentry "password"))))

  ;;(setq org-gcal-client-secret (get-authinfo "gcal.api" "9999"))

  (setq org-gcal-client-id (password-store-get "org-gcal-client-id")
        org-gcal-client-secret (password-store-get "org-gcal-client-secret"))

  (setq org-modules '(org-bbdb org-bibtex org-gnus org-habit org-info org-irc org-mhe org-rmail org-w3m org-protocol))

  ;; My Autolinks mode.
  ;; (setq org-directory "~/Dropbox/Org")
  ;; (load-file "~/.emacs.d/private/org-autolinks/org-autolinks-mode.el")

  ;; Org Agenda
  (setq org-agenda-files (list "~/Dropbox/Org/Projects/"))
  (setq org-refile-targets '((nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 9)))
  (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
  (setq org-refile-use-outline-path t)                  ; Show full paths for refiling

  ;; Adapted from http://stackoverflow.com/a/12751732/584121
  (require 'org-protocol)
  (setq org-protocol-default-template-key "l")
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "/home/jon/Dropbox/Org/notes.org" "Tasks")
           "* TODO %?  %i\n  %a")
          ("m" "Movie" entry (file+headline "/home/jon/Dropbox/Org/movies.org" "To Watch")
           "* %a\n %?\n %i")
          ("l" "Link" entry (file+olp "/home/jon/Dropbox/Org/notes.org" "Web Links")
           "* %a\n %?\n %i")
          ))

  ;; Disable holidays. Is there an easier way of doing this? 
  (setq holiday-christian-holidays nil)
  (setq holiday-islamic-holidays nil)
  (setq holiday-bahai-holidays nil)
  (setq holiday-oriental-holidays nil)
  (setq holiday-hebrew-holidays nil)

  ;; Bibliography
  (setq reftex-default-bibliography '("~/Dropbox/Papers/library.bib")
        org-ref-default-bibliography '("~/Dropbox/Papers/library.bib")
        org-ref-pdf-directory "~/Dropbox/Papers" ;; keep the final slash off
        org-ref-bibliography-notes "~/Dropbox/Org/Projects/books.org"
        bibtex-completion-pdf-field "file"
        org-ref-get-pdf-filename-function 'org-ref-get-zotero-pdf-filename)

  (setq org-ref-note-title-format
    "** TODO %y - %t
 :PROPERTIES:
  :Custom_ID: %k
  :AUTHOR: %9a
  :JOURNAL: %j
  :YEAR: %y
 :END:
")
  ;; (setq org-ref-open-pdf-function
  ;;       (lambda (fpath)
  ;;         (start-process "okular" "*helm-bibtex-okular*" "/usr/bin/okular" fpath)))

  (defun org-ref-get-zotero-pdf-filename (key)
    "Return the pdf filename indicated by zotero file field.
Argument KEY is the bibtex key."
    (let* ((results (org-ref-get-bibtex-key-and-file key))
           (bibfile (cdr results))
           entry)
      (with-temp-buffer
        (insert-file-contents bibfile)
        (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
        (bibtex-search-entry key nil 0)
        (setq entry (bibtex-parse-entry))
        (let ((e (org-ref-reftex-get-bib-field "file" entry)))
          (if (> (length e) 4)
              (let ((clean-field (replace-regexp-in-string "/+" "/" e)))
                (let ((first-file (car (split-string clean-field ";" t))))
                  (concat "" first-file)))
            (message "PDF filename not found.")
            )))))

  ;; Override this function.
  (defun org-ref-open-bibtex-pdf ()
    "Open pdf for a bibtex entry, if it exists.
assumes point is in
the entry of interest in the bibfile.  but does not check that."
    (interactive)
    (save-excursion
      (bibtex-beginning-of-entry)
      (let* ((bibtex-expand-strings t)
             (entry (bibtex-parse-entry t))
             (key (reftex-get-bib-field "=key=" entry))
             (pdf (org-ref-get-zotero-pdf-filename key)))
        (message "%s" pdf)
        (if (file-exists-p pdf)
            ;; (org-open-link-from-string (format "[[file:%s]]" pdf))
            (shell-command (format "zathura %s" pdf))
          (ding)))))

  (setq neo-theme 'nerd)

  ;; Jupyter
  ;(setq ein:use-auto-complete t)
  ; Or, to enable "superpack" (a little bit hacky improvements):
  ;(setq ein:use-auto-complete-superpack t)
  ;; More autocomplete for jupyter 
  ;(add-to-list 'company-backends #'user-company-ein-backend)

  ;(spacemacs|add-company-backends
  ; :backends ein:company-backend
  ; :modes ein:notebook-mode)

  ;; Org-brain
  (use-package org-brain :ensure t
    :init
    (setq org-brain-path "~/Dropbox/Org/Brain")
    ;; For Evil users
    (with-eval-after-load 'evil
      (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
    :config
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
    (push '("b" "Brain" plain (function org-brain-goto-end)
            "* %i%?" :empty-lines 1)
          org-capture-templates)
    (setq org-brain-visualize-default-choices 'files)
    (setq org-brain-file-entries-use-title nil)
    (setq org-brain-title-max-length 12))

  ;; Markdown 
  (add-hook 'markdown-mode 'visual-line-mode)

  (require 'auth-source-pass)
  (auth-source-pass-enable)

  ;; Mail 
  ;; Send email via Gmail:
  ;;        smtpmail-smtp-service 25)
  (setq smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587
        message-send-mail-function 'smtpmail-send-it
        smtpmail-default-smtp-server "smtp.gmail.com")

  (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
  (setq mu4e-html2text-command "w3m -T text/html")

  ;; configure orgmode support in mu4e
  ;; (require 'org-mu4e)
  ;; when mail is sent, automatically convert org body to HTML
  (setq org-mu4e-convert-to-html t)

  ;; Better looking HTML mail
  ;;(setq shr-color-visible-luminance-min 80)
  ;;(setq shr-use-colors nil)

  (setq mu4e-contexts
        `( ,(make-mu4e-context
             :name "Gmail"
             :enter-func (lambda () (mu4e-message "Switch to Gmail."))
             ;; leave-func not defined
             :match-func (lambda (msg)
                           (when msg
                             (mu4e-message-contact-field-matches msg
                                                                 :to "jon.reeve@gmail.com")))
             :vars '(  ( user-mail-address  . "jon.reeve@gmail.com" )
                       ( user-full-name     . "Jonathan Reeve" )
                       ( mu4e-sent-folder   . "/gmail/[Gmail]/.Sent Mail" )
                       ( mu4e-drafts-folder . "/gmail/[Gmail]/.Drafts" )
                       ( smtpmail-smtp-user . "jon.reeve" )

                       ;; ( mu4e-compose-signature .
                       ;;                          (concat
                       ;;                           "Alice Derleth\n"
                       ;;                           "Lauttasaari, Finland\n"))
                       ))
           ,(make-mu4e-context
             :name "Columbia"
             :enter-func (lambda () (mu4e-message "Switch to Columbia."))
             ;; leave-fun not defined
             :match-func (lambda (msg)
                           (when msg
                             (or 
                              (mu4e-message-contact-field-matches msg
                                                                  :to "jonathan.reeve@columbia.edu")
                              (mu4e-message-contact-field-matches msg
                                                                  :to "jpr2152@columbia.edu"))
                             ))
             :vars '(  ( user-mail-address   . "jonathan.reeve@columbia.edu" )
                       ( user-full-name      . "Jonathan Reeve" )
                       ( mu4e-sent-folder    . "/columbia/[Gmail]/.Sent Mail" )
                       ( mu4e-drafts-folder  . "/columbia/[Gmail]/.Drafts" )
                       ( smtpmail-smtp-user  . "jpr2152@columbia.edu" )

                       ;; ( mu4e-compose-signature .
                       ;;                          (concat
                       ;;                           "Prof. Alice Derleth\n"
                       ;;                           "Miskatonic University, Dept. of Occult Sciences\n"))
                       ))))

  ;; start with the first (default) context;
  ;; default is to ask-if-none (ask when there's no context yet, and none match)
  (setq mu4e-context-policy 'pick-first)

  ;; compose with the current context is no context matches;
  ;; default is to ask
  (setq mu4e-compose-context-policy nil)

  (setq mu4e-maildir "~/Mail"
        mu4e-trash-folder "/Trash"
        mu4e-refile-folder "/Archive"
        mu4e-get-mail-command "mbsync -a"
        ;mu4e-update-interval 900
        mu4e-view-show-images t
        mu4e-view-show-addresses t
        mu4e-compose-dont-reply-to-self t
        mu4e-user-mail-address-list '("jon.reeve@gmail.com" "jonathan.reeve@columbia.edu" "jpr2152@columbia.edu"))

  ;; Bookmarks
  (setq mu4e-bookmarks
        `(("flag:unread AND NOT flag:trashed" "Unread messages" ?u)
          ("date:7d..now NOT flag:trashed AND NOT flag:replied" "Last 7 days unreplied" ?w)
          ("maildir:/columbia/Inbox NOT flag:trashed AND NOT flag:replied" "Columbia" ?c)
          ("maildir:/gmail/Inbox NOT flag:trashed AND NOT flag:replied" "Gmail" ?g)
          ("maildir:/gmail/Lists NOT flag:trashed AND NOT flag:replied" "Lists" ?l)))

  ;; Set browser
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "qutebrowser")

  ;; RSS
  (eval-after-load 'shr
    '(progn (setq shr-width -1)
            (defun shr-fill-text (text) text)
            (defun shr-fill-lines (start end) nil)
            (defun shr-fill-line () nil)))
  (add-hook 'elfeed-show-mode-hook 'visual-line-mode)

  ;; Keybindings
  (global-set-key (kbd "<f2>") 'org-agenda-list)
  (global-set-key (kbd "<f3>") 'org-todo-list)
  (global-set-key (kbd "<f4>") 'mu4e)
  (with-eval-after-load 'evil-maps
    (define-key evil-normal-state-map (kbd "C-h") nil)
    (define-key evil-normal-state-map (kbd "C-n") nil)
    (define-key evil-motion-state-map (kbd "C-e") nil)
    (define-key evil-normal-state-map (kbd "C-i") nil)
  )
  (global-unset-key (kbd "C-h"))
  (global-unset-key (kbd "C-n"))
  (global-unset-key (kbd "C-e"))
  (global-unset-key (kbd "C-i"))
  (global-set-key (kbd "C-h") 'evil-window-left)
  (global-set-key (kbd "C-n") 'evil-window-down)
  (global-set-key (kbd "C-e") 'evil-window-up)
  (global-set-key (kbd "C-i") 'evil-window-right)
)
(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(evil-want-Y-yank-to-eol nil)
 '(package-selected-packages
   (quote
    (tern livid-mode skewer-mode json-navigator hierarchy json-mode json-snatcher json-reformat js2-refactor multiple-cursors js2-mode yapfify yaml-mode xterm-color ws-butler winum which-key web-mode web-beautify volatile-highlights vi-tilde-fringe uuidgen use-package toc-org tagedit symon string-inflection spaceline-all-the-icons smeargle slim-mode shell-pop scss-mode sass-mode restart-emacs ranger rainbow-delimiters pyvenv pytest pyenv-mode py-isort pug-mode prettier-js popwin pippel pipenv pip-requirements persp-mode pcre2el password-store password-generator paradox overseer orgit org-ref org-projectile org-present org-pomodoro org-mime org-gcal org-download org-bullets org-brain open-junk-file nix-mode neotree nameless multi-term mu4e-maildirs-extension mu4e-alert move-text mmm-mode markdown-toc magit-svn magit-gitflow macrostep lorem-ipsum live-py-mode link-hint js-doc intero insert-shebang indent-guide importmagic impatient-mode hungry-delete hlint-refactor hl-todo hindent highlight-parentheses highlight-numbers highlight-indentation helm-xref helm-themes helm-swoop helm-pydoc helm-purpose helm-projectile helm-org-rifle helm-nixos-options helm-mu helm-mode-manager helm-make helm-hoogle helm-gitignore helm-git-grep helm-flx helm-descbinds helm-css-scss helm-ag haskell-snippets google-translate golden-ratio gnuplot gitignore-templates gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link gh-md font-lock+ flyspell-correct-helm flycheck-pos-tip flycheck-haskell flycheck-elm flycheck-bashate flx-ido fish-mode fill-column-indicator fancy-battery eyebrowse expand-region evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-org evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-magit evil-lisp-state evil-lion evil-indent-plus evil-iedit-state evil-goggles evil-exchange evil-escape evil-ediff evil-cleverparens evil-args evil-anzu eval-sexp-fu eshell-z eshell-prompt-extras esh-help emmet-mode elm-test-runner elm-mode elisp-slime-nav editorconfig dumb-jump dotenv-mode doom-modeline direnv diminish define-word dante cython-mode csv-mode counsel-projectile company-ghci company-ghc column-enforce-mode cmm-mode clean-aindent-mode centered-cursor-mode calfw base16-theme auto-highlight-symbol auto-dictionary auto-compile anaconda-mode aggressive-indent ace-window ace-link ace-jump-helm-line))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
)
